{"version":3,"sources":["faceDetection.js"],"names":["video","document","querySelector","canvas","ctx","getContext","faceCanvas","faceCtx","faceDetector","window","FaceDetector","optionsInputs","options","SIZE","SCALE","handleOption","event","value","name","currentTarget","parseFloat","populateVideo","stream","navigator","mediaDevices","getUserMedia","width","height","srcObject","play","console","log","videoWidth","videoHeight","detect","faces","forEach","drawFace","censor","requestAnimationFrame","face","top","left","boundingBox","clearRect","strokeStyle","lineWidth","strokeRect","imageSmoothingEnabled","drawImage","x","y","then"],"mappings":";AAAA,MAAMA,EAAQC,SAASC,cAAc,WAE/BC,EAASF,SAASC,cAAc,UAChCE,EAAMD,EAAOE,WAAW,MAExBC,EAAaL,SAASC,cAAc,SACpCK,EAAUD,EAAWD,WAAW,MAEhCG,EAAe,IAAIC,OAAOC,aAC1BC,EAAgBV,SAASC,cAAc,iCAGvCU,EAAU,CACdC,KAAM,GACNC,MAAO,MAGT,SAASC,EAAaC,GACd,MAAA,MAAEC,EAAF,KAASC,GAASF,EAAMG,cAC9BP,EAAQM,GAAQE,WAAWH,GAI7B,eAAeI,IACPC,MAAAA,QAAeC,UAAUC,aAAaC,aAAa,CACvDzB,MAAO,CAAE0B,MAAO,KAAMC,OAAQ,OAEhC3B,EAAM4B,UAAYN,QACZtB,EAAM6B,OAGZC,QAAQC,IAAI/B,EAAMgC,WAAYhC,EAAMiC,aACpC9B,EAAOuB,MAAQ1B,EAAMgC,WACrB7B,EAAOwB,OAAS3B,EAAMiC,YACtB3B,EAAWoB,MAAQ1B,EAAMgC,WACzB1B,EAAWqB,OAAS3B,EAAMiC,YAG5B,eAAeC,IACPC,MAAAA,QAAc3B,EAAa0B,OAAOlC,GACxC8B,QAAQC,IAAII,GAEZA,EAAMC,QAAQC,GACdF,EAAMC,QAAQE,GACdC,sBAAsBL,GAGxB,SAASG,EAASG,GACV,MAAA,MAAEd,EAAF,OAASC,EAAT,IAAiBc,EAAjB,KAAsBC,GAASF,EAAKG,YAC1CvC,EAAIwC,UAAU,EAAG,EAAGzC,EAAOuB,MAAOvB,EAAOwB,QACzCvB,EAAIyC,YAAc,UAClBzC,EAAI0C,UAAY,EAChBhB,QAAQC,IAAI,CAAEL,MAAAA,EAAOC,OAAAA,EAAQc,IAAAA,EAAKC,KAAAA,IAClCtC,EAAI2C,WAAWL,EAAMD,EAAKf,EAAOC,GAGnC,SAASW,GAASK,YAAaH,IAC7BjC,EAAQyC,uBAAwB,EAChCzC,EAAQqC,UAAU,EAAG,EAAGtC,EAAWoB,MAAOpB,EAAWqB,QAErDpB,EAAQ0C,UAGNjD,EACAwC,EAAKU,EACLV,EAAKW,EACLX,EAAKd,MACLc,EAAKb,OAGLa,EAAKU,EACLV,EAAKW,EACLvC,EAAQC,KACRD,EAAQC,MAIJa,MAAAA,EAAQc,EAAKd,MAAQd,EAAQE,MAC7Ba,EAASa,EAAKb,OAASf,EAAQE,MACrCP,EAAQ0C,UACN3C,EACAkC,EAAKU,EACLV,EAAKW,EACLvC,EAAQC,KACRD,EAAQC,KAER2B,EAAKU,GAAKxB,EAAQc,EAAKd,OAAS,EAChCc,EAAKW,GAAKxB,EAASa,EAAKb,QAAU,EAClCD,EACAC,GAIJN,IAAgB+B,KAAKlB","file":"faceDetection.80076713.js","sourceRoot":"..","sourcesContent":["const video = document.querySelector(\".webcam\");\n\nconst canvas = document.querySelector(\".video\");\nconst ctx = canvas.getContext(\"2d\");\n\nconst faceCanvas = document.querySelector(\".face\");\nconst faceCtx = faceCanvas.getContext(\"2d\");\n\nconst faceDetector = new window.FaceDetector();\nconst optionsInputs = document.querySelector('.controls input[type=\"range\"]'\n);\n\nconst options = {\n  SIZE: 10,\n  SCALE: 1.35,\n};\n\nfunction handleOption(event) {\n  const { value, name } = event.currentTarget;\n  options[name] = parseFloat(value);\n}\n\n//write function that populates user video\nasync function populateVideo() {\n  const stream = await navigator.mediaDevices.getUserMedia({\n    video: { width: 1280, height: 720 }\n  });\n  video.srcObject = stream;\n  await video.play();\n\n  //size the canvas to be the same size as the video\n  console.log(video.videoWidth, video.videoHeight);\n  canvas.width = video.videoWidth;\n  canvas.height = video.videoHeight;\n  faceCanvas.width = video.videoWidth;\n  faceCanvas.height = video.videoHeight;\n}\n\nasync function detect() {\n  const faces = await faceDetector.detect(video);\n  console.log(faces);\n  //ask browser when next animation frame is and run detect\n  faces.forEach(drawFace);\n  faces.forEach(censor);\n  requestAnimationFrame(detect);\n}\n\nfunction drawFace(face) {\n  const { width, height, top, left } = face.boundingBox;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.strokeStyle = \"#ffc600\";\n  ctx.lineWidth = 2;\n  console.log({ width, height, top, left });\n  ctx.strokeRect(left, top, width, height);\n}\n\nfunction censor({ boundingBox: face }) {\n  faceCtx.imageSmoothingEnabled = false;\n  faceCtx.clearRect(0, 0, faceCanvas.width, faceCanvas.height);\n  //draw the small face\n  faceCtx.drawImage(\n    \n    //5 source args\n    video, //where does the source come from\n    face.x, //where do we start the source pull from\n    face.y,\n    face.width,\n    face.height,\n\n    //4 draw args\n    face.x, //where should we start drawing the x and y\n    face.y,\n    options.SIZE,\n    options.SIZE\n  );\n\n  //draw the small face back on but scale up\n  const width = face.width * options.SCALE;\n  const height = face.height * options.SCALE;\n  faceCtx.drawImage(\n    faceCanvas, //source\n    face.x,\n    face.y,\n    options.SIZE,\n    options.SIZE,\n    //drawing args\n    face.x - (width - face.width) / 2,\n    face.y - (height - face.height) / 2,\n    width,\n    height\n  );\n}\n\npopulateVideo().then(detect);\n"]}